{"version":3,"file":"useProjects-ff20a32c.js","sources":["../../src/pages/users/widgets/UserAvatar.vue","../../src/data/pages/projects.ts","../../src/pages/projects/composables/useProjects.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport { PropType } from 'vue'\nimport { User } from '../types'\n\nconst avatarColor = (userName: string) => {\n    const colors = ['primary', '#FFD43A', '#ADFF00', '#262824', 'danger']\n    const index = userName.charCodeAt(0) % colors.length\n    return colors[index]\n}\n\ndefineProps({\n    user: {\n        type: Object as PropType<User>,\n        required: true,\n    },\n    size: {\n        type: String,\n        default: 'medium',\n    },\n})\n\nconst isUrl = (avatar: string) => {\n    return avatar.startsWith('http') || avatar.startsWith('blob:')\n}\n</script>\n\n<template>\n    <VaAvatar\n        :size=\"size\"\n        :src=\"isUrl(user.avatar) ? user.avatar : ''\"\n        :fallback-text=\"user.avatar || user.fullname[0]\"\n        :color=\"avatarColor(user.fullname)\"\n    />\n</template>\n","import { sleep } from '../../services/utils'\nimport projectsDb from './projects-db.json'\nimport usersDb from './users-db.json'\n\n// Simulate API calls\nexport type Pagination = {\n    page: number\n    perPage: number\n    total: number\n}\n\nexport type Sorting = {\n    sortBy: keyof (typeof projectsDb)[number] | undefined\n    sortingOrder: 'asc' | 'desc' | null\n}\n\nconst getSortItem = (obj: any, sortBy: keyof (typeof projectsDb)[number]) => {\n    if (sortBy === 'project_owner') {\n        return obj.project_owner.fullname\n    }\n\n    if (sortBy === 'team') {\n        return obj.team.map((user: any) => user.fullname).join(', ')\n    }\n\n    if (sortBy === 'creation_date') {\n        return new Date(obj[sortBy])\n    }\n\n    return obj[sortBy]\n}\n\nexport const getProjects = async (options: Sorting & Pagination) => {\n    await sleep(1000)\n\n    const projects = projectsDb.map((project) => ({\n        ...project,\n        project_owner: usersDb.find((user) => user.id === project.project_owner)! as (typeof usersDb)[number],\n        team: usersDb.filter((user) => project.team.includes(user.id)) as (typeof usersDb)[number][],\n    }))\n\n    if (options.sortBy && options.sortingOrder) {\n        projects.sort((a, b) => {\n            a = getSortItem(a, options.sortBy!)\n            b = getSortItem(b, options.sortBy!)\n            if (a < b) {\n                return options.sortingOrder === 'asc' ? -1 : 1\n            }\n            if (a > b) {\n                return options.sortingOrder === 'asc' ? 1 : -1\n            }\n            return 0\n        })\n    }\n\n    const normalizedProjects = projects.slice((options.page - 1) * options.perPage, options.page * options.perPage)\n\n    return {\n        data: normalizedProjects,\n        pagination: {\n            page: options.page,\n            perPage: options.perPage,\n            total: projectsDb.length,\n        },\n    }\n}\n\nexport const addProject = async (project: Omit<(typeof projectsDb)[number], 'id' | 'creation_date'>) => {\n    await sleep(1000)\n\n    const newProject = {\n        ...project,\n        id: projectsDb.length + 1,\n        creation_date: new Date().toLocaleDateString('gb', { day: 'numeric', month: 'short', year: 'numeric' }),\n    }\n\n    projectsDb.push(newProject)\n\n    return {\n        ...newProject,\n        project_owner: usersDb.find((user) => user.id === project.project_owner)! as (typeof usersDb)[number],\n        team: usersDb.filter((user) => project.team.includes(user.id)) as (typeof usersDb)[number][],\n    }\n}\n\nexport const updateProject = async (project: (typeof projectsDb)[number]) => {\n    await sleep(1000)\n\n    const index = projectsDb.findIndex((p) => p.id === project.id)\n    projectsDb[index] = project\n\n    return project\n}\n\nexport const removeProject = async (project: (typeof projectsDb)[number]) => {\n    await sleep(1000)\n\n    const index = projectsDb.findIndex((p) => p.id === project.id)\n    projectsDb.splice(index, 1)\n\n    return project\n}\n","import { Ref, ref, unref } from 'vue'\nimport {\n    getProjects,\n    addProject,\n    updateProject,\n    removeProject,\n    Sorting,\n    Pagination,\n} from '../../../data/pages/projects'\nimport { Project } from '../types'\nimport { watchIgnorable } from '@vueuse/core'\n\nconst makePaginationRef = () => ref<Pagination>({ page: 1, perPage: 10, total: 0 })\nconst makeSortingRef = () => ref<Sorting>({ sortBy: 'creation_date', sortingOrder: 'desc' })\n\nexport const useProjects = (options?: { sorting?: Ref<Sorting>; pagination?: Ref<Pagination> }) => {\n    const isLoading = ref(false)\n    const projects = ref<Project[]>([])\n\n    const { sorting = makeSortingRef(), pagination = makePaginationRef() } = options ?? {}\n\n    const fetch = async () => {\n        isLoading.value = true\n        const { data, pagination: newPagination } = await getProjects({\n            ...unref(sorting),\n            ...unref(pagination),\n        })\n        projects.value = data as Project[]\n\n        ignoreUpdates(() => {\n            pagination.value = newPagination\n        })\n\n        isLoading.value = false\n    }\n\n    const { ignoreUpdates } = watchIgnorable([pagination, sorting], fetch, { deep: true })\n\n    fetch()\n\n    return {\n        isLoading,\n\n        projects,\n\n        fetch,\n\n        async add(project: Omit<Project, 'id' | 'creation_date'>) {\n            isLoading.value = true\n            await addProject({\n                ...project,\n                project_owner: project.project_owner.id,\n                team: project.team.map((user) => user.id),\n            })\n            await fetch()\n            isLoading.value = false\n        },\n\n        async update(project: Project) {\n            isLoading.value = true\n            await updateProject({\n                ...project,\n                project_owner: project.project_owner.id,\n                team: project.team.map((user) => user.id),\n            })\n            await fetch()\n            isLoading.value = false\n        },\n\n        async remove(project: Project) {\n            isLoading.value = true\n            await removeProject({\n                ...project,\n                project_owner: project.project_owner.id,\n                team: project.team.map((user) => user.id),\n            })\n            await fetch()\n            isLoading.value = false\n        },\n\n        pagination,\n        sorting,\n    }\n}\n"],"names":["avatarColor","userName","colors","index","isUrl","avatar","getSortItem","obj","sortBy","user","getProjects","options","sleep","projects","projectsDb","project","usersDb","a","b","addProject","newProject","updateProject","p","removeProject","makePaginationRef","ref","makeSortingRef","useProjects","isLoading","sorting","pagination","fetch","data","newPagination","unref","ignoreUpdates","watchIgnorable"],"mappings":"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"}