{"version":3,"file":"UsersPage-66a0f77f.js","sources":["../../src/pages/users/widgets/UsersTable.vue","../../src/pages/users/widgets/EditUserForm.vue","../../src/pages/users/UsersPage.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { defineVaDataTableColumns, useModal } from 'vuestic-ui'\nimport { User, UserRole } from '../types'\nimport UserAvatar from './UserAvatar.vue'\nimport { PropType, computed, toRef } from 'vue'\nimport { Pagination, Sorting } from '../../../data/pages/users'\nimport { useVModel } from '@vueuse/core'\nimport { Project } from '../../projects/types'\n\nconst columns = defineVaDataTableColumns([\n    { label: 'Full Name', key: 'fullname', sortable: true },\n    { label: 'Email', key: 'email', sortable: true },\n    { label: 'Username', key: 'username', sortable: true },\n    { label: 'Role', key: 'role', sortable: true },\n    { label: 'Projects', key: 'projects', sortable: true },\n    { label: ' ', key: 'actions', align: 'right' },\n])\n\nconst props = defineProps({\n    users: {\n        type: Array as PropType<User[]>,\n        required: true,\n    },\n    loading: { type: Boolean, default: false },\n    pagination: { type: Object as PropType<Pagination>, required: true },\n    sortBy: { type: String as PropType<Sorting['sortBy']>, required: true },\n    sortingOrder: { type: String as PropType<Sorting['sortingOrder']>, required: true },\n})\n\nconst emit = defineEmits<{\n    (event: 'edit-user', user: User): void\n    (event: 'delete-user', user: User): void\n    (event: 'update:sortBy', sortBy: Sorting['sortBy']): void\n    (event: 'update:sortingOrder', sortingOrder: Sorting['sortingOrder']): void\n}>()\n\nconst users = toRef(props, 'users')\nconst sortByVModel = useVModel(props, 'sortBy', emit)\nconst sortingOrderVModel = useVModel(props, 'sortingOrder', emit)\n\nconst roleColors: Record<UserRole, string> = {\n    admin: 'danger',\n    user: 'background-element',\n    owner: 'warning',\n}\n\nconst totalPages = computed(() => Math.ceil(props.pagination.total / props.pagination.perPage))\n\nconst { confirm } = useModal()\n\nconst onUserDelete = async (user: User) => {\n    const agreed = await confirm({\n        title: 'Delete user',\n        message: `Are you sure you want to delete ${user.fullname}?`,\n        okText: 'Delete',\n        cancelText: 'Cancel',\n        size: 'small',\n        maxWidth: '380px',\n    })\n\n    if (agreed) {\n        emit('delete-user', user)\n    }\n}\n\nconst formatProjectNames = (projects: Project[]) => {\n    if (projects.length === 0) return 'No projects'\n    if (projects.length <= 2) {\n        return projects.map((project) => project.project_name).join(', ')\n    }\n\n    return (\n        projects\n            .slice(0, 2)\n            .map((project) => project.project_name)\n            .join(', ') +\n        ' + ' +\n        (projects.length - 2) +\n        ' more'\n    )\n}\n</script>\n\n<template>\n    <VaDataTable\n        v-model:sort-by=\"sortByVModel\"\n        v-model:sorting-order=\"sortingOrderVModel\"\n        :columns=\"columns\"\n        :items=\"users\"\n        :loading=\"$props.loading\"\n    >\n        <template #cell(fullname)=\"{ rowData }\">\n            <div class=\"flex items-center gap-2 max-w-[230px] ellipsis\">\n                <UserAvatar :user=\"rowData as User\" size=\"small\" />\n                {{ rowData.fullname }}\n            </div>\n        </template>\n\n        <template #cell(username)=\"{ rowData }\">\n            <div class=\"max-w-[120px] ellipsis\">\n                {{ rowData.username }}\n            </div>\n        </template>\n\n        <template #cell(email)=\"{ rowData }\">\n            <div class=\"ellipsis max-w-[230px]\">\n                {{ rowData.email }}\n            </div>\n        </template>\n\n        <template #cell(role)=\"{ rowData }\">\n            <VaBadge :text=\"rowData.role\" :color=\"roleColors[rowData.role as UserRole]\" />\n        </template>\n\n        <template #cell(projects)=\"{ rowData }\">\n            <div class=\"ellipsis max-w-[300px] lg:max-w-[450px]\">\n                {{ formatProjectNames(rowData.projects) }}\n            </div>\n        </template>\n\n        <template #cell(actions)=\"{ rowData }\">\n            <div class=\"flex gap-2 justify-end\">\n                <VaButton\n                    preset=\"primary\"\n                    size=\"small\"\n                    icon=\"mso-edit\"\n                    aria-label=\"Edit user\"\n                    @click=\"$emit('edit-user', rowData as User)\"\n                />\n                <VaButton\n                    preset=\"primary\"\n                    size=\"small\"\n                    icon=\"mso-delete\"\n                    color=\"danger\"\n                    aria-label=\"Delete user\"\n                    @click=\"onUserDelete(rowData as User)\"\n                />\n            </div>\n        </template>\n    </VaDataTable>\n\n    <div class=\"flex flex-col-reverse md:flex-row gap-2 justify-between items-center py-2\">\n        <div>\n            <b>{{ $props.pagination.total }} results.</b>\n            Results per page\n            <VaSelect v-model=\"$props.pagination.perPage\" class=\"!w-20\" :options=\"[10, 50, 100]\" />\n        </div>\n\n        <div v-if=\"totalPages > 1\" class=\"flex\">\n            <VaButton\n                preset=\"secondary\"\n                icon=\"va-arrow-left\"\n                aria-label=\"Previous page\"\n                :disabled=\"$props.pagination.page === 1\"\n                @click=\"$props.pagination.page--\"\n            />\n            <VaButton\n                class=\"mr-2\"\n                preset=\"secondary\"\n                icon=\"va-arrow-right\"\n                aria-label=\"Next page\"\n                :disabled=\"$props.pagination.page === totalPages\"\n                @click=\"$props.pagination.page++\"\n            />\n            <VaPagination\n                v-model=\"$props.pagination.page\"\n                buttons-preset=\"secondary\"\n                :pages=\"totalPages\"\n                :visible-pages=\"5\"\n                :boundary-links=\"false\"\n                :direction-links=\"false\"\n            />\n        </div>\n    </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.va-data-table {\n    ::v-deep(.va-data-table__table-tr) {\n        border-bottom: 1px solid var(--va-background-border);\n    }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { PropType, computed, ref, watch } from 'vue'\nimport { useForm } from 'vuestic-ui'\nimport { User, UserRole } from '../types'\nimport UserAvatar from './UserAvatar.vue'\nimport { useProjects } from '../../projects/composables/useProjects'\nimport { validators } from '../../../services/utils'\n\nconst props = defineProps({\n    user: {\n        type: Object as PropType<User | null>,\n        default: null,\n    },\n    saveButtonLabel: {\n        type: String,\n        default: 'Save',\n    },\n})\n\nconst defaultNewUser: User = {\n    id: -1,\n    avatar: '',\n    fullname: '',\n    role: 'user',\n    username: '',\n    notes: '',\n    email: '',\n    active: true,\n    projects: [],\n}\n\nconst newUser = ref<User>({ ...defaultNewUser })\n\nconst isFormHasUnsavedChanges = computed(() => {\n    return Object.keys(newUser.value).some((key) => {\n        if (key === 'avatar' || key === 'projects') {\n            return false\n        }\n\n        return newUser.value[key as keyof User] !== (props.user ?? defaultNewUser)?.[key as keyof User]\n    })\n})\n\ndefineExpose({\n    isFormHasUnsavedChanges,\n})\n\nwatch(\n    () => props.user,\n    () => {\n        if (!props.user) {\n            return\n        }\n\n        newUser.value = {\n            ...props.user,\n            avatar: props.user.avatar || '',\n        }\n    },\n    { immediate: true },\n)\n\nconst avatar = ref<File>()\n\nconst makeAvatarBlobUrl = (avatar: File) => {\n    return URL.createObjectURL(avatar)\n}\n\nwatch(avatar, (newAvatar) => {\n    newUser.value.avatar = newAvatar ? makeAvatarBlobUrl(newAvatar) : ''\n})\n\nconst form = useForm('add-user-form')\n\nconst emit = defineEmits(['close', 'save'])\n\nconst onSave = () => {\n    if (form.validate()) {\n        emit('save', newUser.value)\n    }\n}\n\nconst roleSelectOptions: { text: Capitalize<UserRole>; value: UserRole }[] = [\n    { text: 'Admin', value: 'admin' },\n    { text: 'User', value: 'user' },\n    { text: 'Owner', value: 'owner' },\n]\n\nconst { projects } = useProjects({ pagination: ref({ page: 1, perPage: 9999, total: 10 }) })\n</script>\n\n<template>\n    <VaForm\n        v-slot=\"{ isValid }\"\n        ref=\"add-user-form\"\n        class=\"flex-col justify-start items-start gap-4 inline-flex w-full\"\n    >\n        <VaFileUpload\n            v-model=\"avatar\"\n            type=\"single\"\n            hide-file-list\n            class=\"self-stretch justify-start items-center gap-4 inline-flex\"\n        >\n            <UserAvatar :user=\"newUser\" size=\"large\" />\n            <VaButton preset=\"primary\" size=\"small\">Add image</VaButton>\n            <VaButton\n                v-if=\"avatar\"\n                preset=\"primary\"\n                color=\"danger\"\n                size=\"small\"\n                icon=\"delete\"\n                class=\"z-10\"\n                @click.stop=\"avatar = undefined\"\n            />\n        </VaFileUpload>\n        <div class=\"self-stretch flex-col justify-start items-start gap-4 flex\">\n            <div class=\"flex gap-4 flex-col sm:flex-row w-full\">\n                <VaInput\n                    v-model=\"newUser.fullname\"\n                    label=\"Full name\"\n                    class=\"w-full sm:w-1/2\"\n                    :rules=\"[validators.required]\"\n                    name=\"fullname\"\n                />\n                <VaInput\n                    v-model=\"newUser.username\"\n                    label=\"Username\"\n                    class=\"w-full sm:w-1/2\"\n                    :rules=\"[validators.required]\"\n                    name=\"username\"\n                />\n            </div>\n            <div class=\"flex gap-4 flex-col sm:flex-row w-full\">\n                <VaInput\n                    v-model=\"newUser.email\"\n                    label=\"Email\"\n                    class=\"w-full sm:w-1/2\"\n                    :rules=\"[validators.required, validators.email]\"\n                    name=\"email\"\n                />\n                <VaSelect\n                    v-model=\"newUser.projects\"\n                    label=\"Projects\"\n                    class=\"w-full sm:w-1/2\"\n                    :options=\"projects\"\n                    :rules=\"[validators.required]\"\n                    name=\"projects\"\n                    text-by=\"project_name\"\n                    track-by=\"id\"\n                    multiple\n                    :max-visible-options=\"2\"\n                />\n            </div>\n\n            <div class=\"flex gap-4 w-full\">\n                <div class=\"w-1/2\">\n                    <VaSelect\n                        v-model=\"newUser.role\"\n                        label=\"Role\"\n                        class=\"w-full\"\n                        :options=\"roleSelectOptions\"\n                        :rules=\"[validators.required]\"\n                        name=\"role\"\n                        value-by=\"value\"\n                    />\n                </div>\n\n                <div class=\"flex items-center w-1/2 mt-4\">\n                    <VaCheckbox v-model=\"newUser.active\" label=\"Active\" class=\"w-full\" name=\"active\" />\n                </div>\n            </div>\n\n            <VaTextarea v-model=\"newUser.notes\" label=\"Notes\" class=\"w-full\" name=\"notes\" />\n            <div class=\"flex gap-2 flex-col-reverse items-stretch justify-end w-full sm:flex-row sm:items-center\">\n                <VaButton preset=\"secondary\" color=\"secondary\" @click=\"$emit('close')\">Cancel</VaButton>\n                <VaButton :disabled=\"!isValid\" @click=\"onSave\">{{ saveButtonLabel }}</VaButton>\n            </div>\n        </div>\n    </VaForm>\n</template>\n","<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport UsersTable from './widgets/UsersTable.vue'\nimport EditUserForm from './widgets/EditUserForm.vue'\nimport { User } from './types'\nimport { useUsers } from './composables/useUsers'\nimport { useModal, useToast } from 'vuestic-ui'\n\nconst doShowEditUserModal = ref(false)\n\nconst { users, isLoading, filters, sorting, pagination, ...usersApi } = useUsers()\n\nconst userToEdit = ref<User | null>(null)\n\nconst showEditUserModal = (user: User) => {\n    userToEdit.value = user\n    doShowEditUserModal.value = true\n}\n\nconst showAddUserModal = () => {\n    userToEdit.value = null\n    doShowEditUserModal.value = true\n}\n\nconst { init: notify } = useToast()\n\nconst onUserSaved = async (user: User) => {\n    if (userToEdit.value) {\n        await usersApi.update(user)\n        notify({\n            message: `${user.fullname} has been updated`,\n            color: 'success',\n        })\n    } else {\n        usersApi.add(user)\n        notify({\n            message: `${user.fullname} has been created`,\n            color: 'success',\n        })\n    }\n}\n\nconst onUserDelete = async (user: User) => {\n    await usersApi.remove(user)\n    notify({\n        message: `${user.fullname} has been deleted`,\n        color: 'success',\n    })\n}\n\nconst editFormRef = ref()\n\nconst { confirm } = useModal()\n\nconst beforeEditFormModalClose = async (hide: () => unknown) => {\n    if (editFormRef.value.isFormHasUnsavedChanges) {\n        const agreed = await confirm({\n            maxWidth: '380px',\n            message: 'Form has unsaved changes. Are you sure you want to close it?',\n            size: 'small',\n        })\n        if (agreed) {\n            hide()\n        }\n    } else {\n        hide()\n    }\n}\n</script>\n\n<template>\n    <h1 class=\"page-title\">Users</h1>\n\n    <VaCard>\n        <VaCardContent>\n            <div class=\"flex flex-col md:flex-row gap-2 mb-2 justify-between\">\n                <div class=\"flex flex-col md:flex-row gap-2 justify-start\">\n                    <VaButtonToggle\n                        v-model=\"filters.isActive\"\n                        color=\"background-element\"\n                        border-color=\"background-element\"\n                        :options=\"[\n                            { label: 'Active', value: true },\n                            { label: 'Inactive', value: false },\n                        ]\"\n                    />\n                    <VaInput v-model=\"filters.search\" placeholder=\"Search\">\n                        <template #prependInner>\n                            <VaIcon name=\"search\" color=\"secondary\" size=\"small\" />\n                        </template>\n                    </VaInput>\n                </div>\n                <VaButton @click=\"showAddUserModal\">Add User</VaButton>\n            </div>\n\n            <UsersTable\n                v-model:sort-by=\"sorting.sortBy\"\n                v-model:sorting-order=\"sorting.sortingOrder\"\n                :users=\"users\"\n                :loading=\"isLoading\"\n                :pagination=\"pagination\"\n                @editUser=\"showEditUserModal\"\n                @deleteUser=\"onUserDelete\"\n            />\n        </VaCardContent>\n    </VaCard>\n\n    <VaModal\n        v-slot=\"{ cancel, ok }\"\n        v-model=\"doShowEditUserModal\"\n        size=\"small\"\n        mobile-fullscreen\n        close-button\n        hide-default-actions\n        :before-cancel=\"beforeEditFormModalClose\"\n    >\n        <h1 class=\"va-h5\">{{ userToEdit ? 'Edit user' : 'Add user' }}</h1>\n        <EditUserForm\n            ref=\"editFormRef\"\n            :user=\"userToEdit\"\n            :save-button-label=\"userToEdit ? 'Save' : 'Add'\"\n            @close=\"cancel\"\n            @save=\"\n                (user) => {\n                    onUserSaved(user)\n                    ok()\n                }\n            \"\n        />\n    </VaModal>\n</template>\n"],"names":["columns","defineVaDataTableColumns","props","__props","emit","__emit","users","toRef","sortByVModel","useVModel","sortingOrderVModel","roleColors","totalPages","computed","confirm","useModal","onUserDelete","user","formatProjectNames","projects","project","defaultNewUser","newUser","ref","isFormHasUnsavedChanges","key","_a","__expose","watch","avatar","makeAvatarBlobUrl","newAvatar","form","useForm","onSave","roleSelectOptions","useProjects","doShowEditUserModal","isLoading","filters","sorting","pagination","usersApi","useUsers","userToEdit","showEditUserModal","showAddUserModal","notify","useToast","onUserSaved","editFormRef","beforeEditFormModalClose","hide"],"mappings":"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"}