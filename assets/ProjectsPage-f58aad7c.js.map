{"version":3,"file":"ProjectsPage-f58aad7c.js","sources":["../../src/pages/projects/widgets/ProjectCards.vue","../../src/pages/projects/widgets/ProjectsTable.vue","../../src/pages/projects/widgets/EditProjectForm.vue","../../src/pages/projects/ProjectsPage.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { PropType } from 'vue'\nimport { Project } from '../types'\nimport ProjectStatusBadge from '../components/ProjectStatusBadge.vue'\n\ndefineProps({\n    projects: {\n        type: Array as PropType<Project[]>,\n        required: true,\n    },\n    loading: {\n        type: Boolean,\n        required: true,\n    },\n})\n\ndefineEmits<{\n    (event: 'edit', project: Project): void\n    (event: 'delete', project: Project): void\n}>()\n\nconst avatarColor = (userName: string) => {\n    const colors = ['primary', '#FFD43A', '#ADFF00', '#262824', 'danger']\n    const index = userName.charCodeAt(0) % colors.length\n    return colors[index]\n}\n</script>\n\n<template>\n    <VaInnerLoading\n        v-if=\"projects.length > 0 || loading\"\n        :loading=\"loading\"\n        class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 min-h-[4rem]\"\n    >\n        <VaCard\n            v-for=\"project in projects\"\n            :key=\"project.project_name\"\n            :style=\"{ '--va-card-outlined-border': '1px solid var(--va-background-element)' }\"\n            outlined\n        >\n            <VaCardContent class=\"flex flex-col h-full\">\n                <div class=\"text-[var(--va-secondary)]\">{{ project.creation_date }}</div>\n                <div class=\"flex flex-col items-center gap-4 grow\">\n                    <h4 class=\"va-h4 text-center self-stretch overflow-hidden line-clamp-2 text-ellipsis\">\n                        {{ project.project_name }}\n                    </h4>\n                    <p>\n                        <span class=\"text-[var(--va-secondary)]\">Owner: </span>\n                        <span>{{ project.project_owner.fullname }}</span>\n                    </p>\n                    <VaAvatarGroup\n                        class=\"my-4\"\n                        :options=\"\n                            project.team.map((user) => ({\n                                label: user.fullname,\n                                src: user.avatar,\n                                fallbackText: user.fullname[0],\n                                color: avatarColor(user.fullname),\n                            }))\n                        \"\n                        :max=\"5\"\n                    />\n                    <ProjectStatusBadge :status=\"project.status\" />\n                </div>\n                <VaDivider class=\"my-6\" />\n                <div class=\"flex justify-between\">\n                    <VaButton preset=\"secondary\" icon=\"mso-edit\" color=\"secondary\" @click=\"$emit('edit', project)\" />\n                    <VaButton preset=\"secondary\" icon=\"mso-delete\" color=\"danger\" @click=\"$emit('delete', project)\" />\n                </div>\n            </VaCardContent>\n        </VaCard>\n    </VaInnerLoading>\n    <div v-else class=\"p-4 flex justify-center items-center text-[var(--va-secondary)]\">No projects</div>\n</template>\n","<script setup lang=\"ts\">\nimport { PropType, computed } from 'vue'\nimport { defineVaDataTableColumns } from 'vuestic-ui'\nimport { Project } from '../types'\nimport UserAvatar from '../../users/widgets/UserAvatar.vue'\nimport ProjectStatusBadge from '../components/ProjectStatusBadge.vue'\nimport { Pagination, Sorting } from '../../../data/pages/projects'\nimport { useVModel } from '@vueuse/core'\n\nconst columns = defineVaDataTableColumns([\n    { label: 'Project name', key: 'project_name', sortable: true },\n    { label: 'Project owner', key: 'project_owner', sortable: true },\n    { label: 'Team', key: 'team', sortable: true },\n    { label: 'Status', key: 'status', sortable: true },\n    { label: 'Creation Date', key: 'creation_date', sortable: true },\n    { label: ' ', key: 'actions' },\n])\n\nconst props = defineProps({\n    projects: {\n        type: Array as PropType<Project[]>,\n        required: true,\n    },\n    loading: {\n        type: Boolean,\n        required: true,\n    },\n    sortBy: {\n        type: Object as PropType<Sorting['sortBy']>,\n        required: true,\n    },\n    sortingOrder: {\n        type: Object as PropType<Sorting['sortingOrder']>,\n        required: true,\n    },\n    pagination: {\n        type: Object as PropType<Pagination>,\n        required: true,\n    },\n})\n\nconst emit = defineEmits<{\n    (event: 'edit', project: Project): void\n    (event: 'delete', project: Project): void\n}>()\n\nconst avatarColor = (userName: string) => {\n    const colors = ['primary', '#FFD43A', '#ADFF00', '#262824', 'danger']\n    const index = userName.charCodeAt(0) % colors.length\n    return colors[index]\n}\n\nconst sortByVModel = useVModel(props, 'sortBy', emit)\nconst sortingOrderVModel = useVModel(props, 'sortingOrder', emit)\n\nconst totalPages = computed(() => Math.ceil(props.pagination.total / props.pagination.perPage))\n</script>\n\n<template>\n    <div>\n        <VaDataTable\n            v-model:sort-by=\"sortByVModel\"\n            v-model:sorting-order=\"sortingOrderVModel\"\n            :items=\"projects\"\n            :columns=\"columns\"\n            :loading=\"loading\"\n        >\n            <template #cell(project_name)=\"{ rowData }\">\n                <div class=\"ellipsis max-w-[230px] lg:max-w-[450px]\">\n                    {{ rowData.project_name }}\n                </div>\n            </template>\n            <template #cell(project_owner)=\"{ rowData }\">\n                <div class=\"flex items-center gap-2 ellipsis max-w-[230px]\">\n                    <UserAvatar :user=\"rowData.project_owner\" size=\"small\" />\n                    {{ rowData.project_owner.fullname }}\n                </div>\n            </template>\n            <template #cell(team)=\"{ rowData: project }\">\n                <VaAvatarGroup\n                    size=\"small\"\n                    :options=\"\n                        (project as Project).team.map((user) => ({\n                            label: user.fullname,\n                            src: user.avatar,\n                            fallbackText: user.fullname[0],\n                            color: avatarColor(user.fullname),\n                        }))\n                    \"\n                    :max=\"5\"\n                />\n            </template>\n            <template #cell(status)=\"{ rowData: project }\">\n                <ProjectStatusBadge :status=\"project.status\" />\n            </template>\n\n            <template #cell(actions)=\"{ rowData: project }\">\n                <div class=\"flex gap-2 justify-end\">\n                    <VaButton\n                        preset=\"primary\"\n                        size=\"small\"\n                        color=\"primary\"\n                        icon=\"mso-edit\"\n                        aria-label=\"Edit project\"\n                        @click=\"$emit('edit', project as Project)\"\n                    />\n                    <VaButton\n                        preset=\"primary\"\n                        size=\"small\"\n                        icon=\"mso-delete\"\n                        color=\"danger\"\n                        aria-label=\"Delete project\"\n                        @click=\"$emit('delete', project as Project)\"\n                    />\n                </div>\n            </template>\n        </VaDataTable>\n        <div class=\"flex flex-col-reverse md:flex-row gap-2 justify-between items-center py-2\">\n            <div>\n                <b>{{ $props.pagination.total }} results.</b>\n                Results per page\n                <VaSelect v-model=\"$props.pagination.perPage\" class=\"!w-20\" :options=\"[10, 50, 100]\" />\n            </div>\n\n            <div v-if=\"totalPages > 1\" class=\"flex\">\n                <VaButton\n                    preset=\"secondary\"\n                    icon=\"va-arrow-left\"\n                    aria-label=\"Previous page\"\n                    :disabled=\"$props.pagination.page === 1\"\n                    @click=\"$props.pagination.page--\"\n                />\n                <VaButton\n                    class=\"mr-2\"\n                    preset=\"secondary\"\n                    icon=\"va-arrow-right\"\n                    aria-label=\"Next page\"\n                    :disabled=\"$props.pagination.page === totalPages\"\n                    @click=\"$props.pagination.page++\"\n                />\n                <VaPagination\n                    v-model=\"$props.pagination.page\"\n                    buttons-preset=\"secondary\"\n                    :pages=\"totalPages\"\n                    :visible-pages=\"5\"\n                    :boundary-links=\"false\"\n                    :direction-links=\"false\"\n                />\n            </div>\n        </div>\n    </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.va-data-table {\n    ::v-deep(tbody .va-data-table__table-tr) {\n        border-bottom: 1px solid var(--va-background-border);\n    }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed, ref, watch } from 'vue'\nimport { EmptyProject, Project } from '../types'\nimport { SelectOption } from 'vuestic-ui'\nimport { useUsers } from '../../users/composables/useUsers'\nimport ProjectStatusBadge from '../components/ProjectStatusBadge.vue'\nimport UserAvatar from '../../users/widgets/UserAvatar.vue'\n\nconst props = defineProps<{\n    project: Project | null\n    saveButtonLabel: string\n}>()\n\ndefineEmits<{\n    (event: 'save', project: Project): void\n    (event: 'close'): void\n}>()\n\nconst defaultNewProject: EmptyProject = {\n    project_name: '',\n    project_owner: undefined,\n    team: [],\n    status: undefined,\n}\n\nconst newProject = ref({ ...defaultNewProject })\n\nconst isFormHasUnsavedChanges = computed(() => {\n    return Object.keys(newProject.value).some((key) => {\n        if (key === 'team') {\n            return false\n        }\n\n        return (\n            newProject.value[key as keyof EmptyProject] !==\n            (props.project ?? defaultNewProject)?.[key as keyof EmptyProject]\n        )\n    })\n})\n\ndefineExpose({\n    isFormHasUnsavedChanges,\n})\n\nwatch(\n    () => props.project,\n    () => {\n        if (!props.project) {\n            return\n        }\n\n        newProject.value = {\n            ...props.project,\n            project_owner: props.project.project_owner,\n        }\n    },\n    { immediate: true },\n)\n\nconst required = (v: string | SelectOption) => !!v || 'This field is required'\n\nconst { users: teamUsers, filters: teamFilters } = useUsers({ pagination: ref({ page: 1, perPage: 100, total: 10 }) })\nconst { users: ownerUsers, filters: ownerFilters } = useUsers({ pagination: ref({ page: 1, perPage: 100, total: 10 }) })\n</script>\n\n<template>\n    <VaForm v-slot=\"{ validate }\" class=\"flex flex-col gap-2\">\n        <VaInput v-model=\"newProject.project_name\" label=\"Project name\" :rules=\"[required]\" />\n        <VaSelect\n            v-model=\"newProject.project_owner\"\n            v-model:search=\"ownerFilters.search\"\n            searchable\n            label=\"Owner\"\n            text-by=\"fullname\"\n            track-by=\"id\"\n            :rules=\"[required]\"\n            :options=\"ownerUsers\"\n        >\n            <template #content=\"{ value: user }\">\n                <div v-if=\"user\" :key=\"user.id\" class=\"flex items-center gap-1 mr-4\">\n                    <UserAvatar :user=\"user\" size=\"18px\" />\n                    {{ user.fullname }}\n                </div>\n            </template>\n        </VaSelect>\n        <VaSelect\n            v-model=\"newProject.team\"\n            v-model:search=\"teamFilters.search\"\n            label=\"Team\"\n            text-by=\"fullname\"\n            track-by=\"id\"\n            multiple\n            :rules=\"[(v: any) => ('length' in v && v.length > 0) || 'This field is required']\"\n            :options=\"teamUsers\"\n            :max-visible-options=\"$vaBreakpoint.mdUp ? 3 : 1\"\n        >\n            <template #content=\"{ valueArray }\">\n                <template v-if=\"valueArray\">\n                    <div v-for=\"(user, index) in valueArray\" :key=\"user.id\" class=\"flex items-center gap-1 mr-2\">\n                        <UserAvatar :user=\"user\" size=\"18px\" />\n                        {{ user.fullname }}{{ index < valueArray.length - 1 ? ',' : '' }}\n                    </div>\n                </template>\n            </template>\n        </VaSelect>\n        <VaSelect\n            v-model=\"newProject.status\"\n            label=\"Status\"\n            :rules=\"[required]\"\n            track-by=\"value\"\n            value-by=\"value\"\n            :options=\"[\n                { text: 'In progress', value: 'in progress' },\n                { text: 'Archived', value: 'archived' },\n                { text: 'Completed', value: 'completed' },\n                { text: 'Important', value: 'important' },\n            ]\"\n        >\n            <template #content=\"{ value }\">\n                <ProjectStatusBadge v-if=\"value\" :status=\"value.value\" />\n            </template>\n        </VaSelect>\n        <div class=\"flex justify-end flex-col-reverse sm:flex-row mt-4 gap-2\">\n            <VaButton preset=\"secondary\" color=\"secondary\" @click=\"$emit('close')\">Cancel</VaButton>\n            <VaButton @click=\"validate() && $emit('save', newProject as Project)\">{{ saveButtonLabel }}</VaButton>\n        </div>\n    </VaForm>\n</template>\n\n<style lang=\"scss\" scoped>\n.va-select-content__autocomplete {\n    flex: 1;\n}\n\n.va-input-wrapper__text {\n    gap: 0.2rem;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { useLocalStorage } from '@vueuse/core'\nimport { useProjects } from './composables/useProjects'\nimport ProjectCards from './widgets/ProjectCards.vue'\nimport ProjectTable from './widgets/ProjectsTable.vue'\nimport EditProjectForm from './widgets/EditProjectForm.vue'\nimport { Project } from './types'\nimport { useModal, useToast } from 'vuestic-ui'\n\nconst doShowAsCards = useLocalStorage('projects-view', true)\n\nconst { projects, update, add, isLoading, remove, pagination, sorting } = useProjects()\n\nconst projectToEdit = ref<Project | null>(null)\nconst doShowProjectFormModal = ref(false)\n\nconst editProject = (project: Project) => {\n    projectToEdit.value = project\n    doShowProjectFormModal.value = true\n}\n\nconst createNewProject = () => {\n    projectToEdit.value = null\n    doShowProjectFormModal.value = true\n}\n\nconst { init: notify } = useToast()\n\nconst onProjectSaved = async (project: Project) => {\n    doShowProjectFormModal.value = false\n    if ('id' in project) {\n        await update(project as Project)\n        notify({\n            message: 'Project updated',\n            color: 'success',\n        })\n    } else {\n        await add(project as Project)\n        notify({\n            message: 'Project created',\n            color: 'success',\n        })\n    }\n}\n\nconst { confirm } = useModal()\n\nconst onProjectDeleted = async (project: Project) => {\n    const response = await confirm({\n        title: 'Delete project',\n        message: `Are you sure you want to delete project \"${project.project_name}\"?`,\n        okText: 'Delete',\n        size: 'small',\n        maxWidth: '380px',\n    })\n\n    if (!response) {\n        return\n    }\n\n    await remove(project)\n    notify({\n        message: 'Project deleted',\n        color: 'success',\n    })\n}\n\nconst editFormRef = ref()\n\nconst beforeEditFormModalClose = async (hide: () => unknown) => {\n    if (editFormRef.value.isFormHasUnsavedChanges) {\n        const agreed = await confirm({\n            maxWidth: '380px',\n            message: 'Form has unsaved changes. Are you sure you want to close it?',\n            size: 'small',\n        })\n        if (agreed) {\n            hide()\n        }\n    } else {\n        hide()\n    }\n}\n</script>\n\n<template>\n    <h1 class=\"page-title\">Projects</h1>\n\n    <VaCard>\n        <VaCardContent>\n            <div class=\"flex flex-col md:flex-row gap-2 mb-2 justify-between\">\n                <div class=\"flex flex-col md:flex-row gap-2 justify-start\">\n                    <VaButtonToggle\n                        v-model=\"doShowAsCards\"\n                        color=\"background-element\"\n                        border-color=\"background-element\"\n                        :options=\"[\n                            { label: 'Cards', value: true },\n                            { label: 'Table', value: false },\n                        ]\"\n                    />\n                </div>\n                <VaButton icon=\"add\" @click=\"createNewProject\">Project</VaButton>\n            </div>\n\n            <ProjectCards\n                v-if=\"doShowAsCards\"\n                :projects=\"projects\"\n                :loading=\"isLoading\"\n                @edit=\"editProject\"\n                @delete=\"onProjectDeleted\"\n            />\n            <ProjectTable\n                v-else\n                v-model:sort-by=\"sorting.sortBy\"\n                v-model:sorting-order=\"sorting.sortingOrder\"\n                v-model:pagination=\"pagination\"\n                :projects=\"projects\"\n                :loading=\"isLoading\"\n                @edit=\"editProject\"\n                @delete=\"onProjectDeleted\"\n            />\n        </VaCardContent>\n\n        <VaModal\n            v-slot=\"{ cancel, ok }\"\n            v-model=\"doShowProjectFormModal\"\n            size=\"small\"\n            mobile-fullscreen\n            close-button\n            stateful\n            hide-default-actions\n            :before-cancel=\"beforeEditFormModalClose\"\n        >\n            <h1 v-if=\"projectToEdit === null\" class=\"va-h5 mb-4\">Add project</h1>\n            <h1 v-else class=\"va-h5 mb-4\">Edit project</h1>\n            <EditProjectForm\n                ref=\"editFormRef\"\n                :project=\"projectToEdit\"\n                :save-button-label=\"projectToEdit === null ? 'Add' : 'Save'\"\n                @close=\"cancel\"\n                @save=\"\n                    (project) => {\n                        onProjectSaved(project)\n                        ok()\n                    }\n                \"\n            />\n        </VaModal>\n    </VaCard>\n</template>\n"],"names":["avatarColor","userName","colors","index","columns","defineVaDataTableColumns","props","__props","emit","__emit","sortByVModel","useVModel","sortingOrderVModel","totalPages","computed","defaultNewProject","newProject","ref","isFormHasUnsavedChanges","key","_a","__expose","watch","required","v","teamUsers","teamFilters","useUsers","ownerUsers","ownerFilters","doShowAsCards","useLocalStorage","projects","update","add","isLoading","remove","pagination","sorting","useProjects","projectToEdit","doShowProjectFormModal","editProject","project","createNewProject","notify","useToast","onProjectSaved","confirm","useModal","onProjectDeleted","editFormRef","beforeEditFormModalClose","hide"],"mappings":"yiCAqBM,MAAAA,EAAeC,GAAqB,CACtC,MAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,QAAQ,EAC9DC,EAAQF,EAAS,WAAW,CAAC,EAAIC,EAAO,OAC9C,OAAOA,EAAOC,CAAK,CAAA,srDCfvB,MAAMC,EAAUC,GAAyB,CACrC,CAAE,MAAO,eAAgB,IAAK,eAAgB,SAAU,EAAK,EAC7D,CAAE,MAAO,gBAAiB,IAAK,gBAAiB,SAAU,EAAK,EAC/D,CAAE,MAAO,OAAQ,IAAK,OAAQ,SAAU,EAAK,EAC7C,CAAE,MAAO,SAAU,IAAK,SAAU,SAAU,EAAK,EACjD,CAAE,MAAO,gBAAiB,IAAK,gBAAiB,SAAU,EAAK,EAC/D,CAAE,MAAO,IAAK,IAAK,SAAU,CAAA,CAChC,EAEKC,EAAQC,EAuBRC,EAAOC,EAKPT,EAAeC,GAAqB,CACtC,MAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,QAAQ,EAC9DC,EAAQF,EAAS,WAAW,CAAC,EAAIC,EAAO,OAC9C,OAAOA,EAAOC,CAAK,CAAA,EAGjBO,EAAeC,EAAUL,EAAO,SAAUE,CAAI,EAC9CI,EAAqBD,EAAUL,EAAO,eAAgBE,CAAI,EAE1DK,EAAaC,EAAS,IAAM,KAAK,KAAKR,EAAM,WAAW,MAAQA,EAAM,WAAW,OAAO,CAAC,+2EC/C9F,MAAMA,EAAQC,EAURQ,EAAkC,CACpC,aAAc,GACd,cAAe,OACf,KAAM,CAAC,EACP,OAAQ,MAAA,EAGNC,EAAaC,EAAI,CAAE,GAAGF,CAAmB,CAAA,EAEzCG,EAA0BJ,EAAS,IAC9B,OAAO,KAAKE,EAAW,KAAK,EAAE,KAAMG,GAAQ,OAC/C,OAAIA,IAAQ,OACD,GAIPH,EAAW,MAAMG,CAAyB,MACzCC,EAAAd,EAAM,SAAWS,IAAjB,YAAAK,EAAsCD,GAAyB,CAEvE,CACJ,EAEYE,EAAA,CACT,wBAAAH,CAAA,CACH,EAEDI,GACI,IAAMhB,EAAM,QACZ,IAAM,CACGA,EAAM,UAIXU,EAAW,MAAQ,CACf,GAAGV,EAAM,QACT,cAAeA,EAAM,QAAQ,aAAA,EAErC,EACA,CAAE,UAAW,EAAK,CAAA,EAGtB,MAAMiB,EAAYC,GAA6B,CAAC,CAACA,GAAK,yBAEhD,CAAE,MAAOC,EAAW,QAASC,GAAgBC,EAAS,CAAE,WAAYV,EAAI,CAAE,KAAM,EAAG,QAAS,IAAK,MAAO,EAAG,CAAC,EAAG,EAC/G,CAAE,MAAOW,EAAY,QAASC,GAAiBF,EAAS,CAAE,WAAYV,EAAI,CAAE,KAAM,EAAG,QAAS,IAAK,MAAO,EAAG,CAAC,EAAG,q4ECpDjH,MAAAa,EAAgBC,EAAgB,gBAAiB,EAAI,EAErD,CAAE,SAAAC,EAAU,OAAAC,EAAQ,IAAAC,EAAK,UAAAC,EAAW,OAAAC,EAAQ,WAAAC,EAAY,QAAAC,GAAYC,IAEpEC,EAAgBvB,EAAoB,IAAI,EACxCwB,EAAyBxB,EAAI,EAAK,EAElCyB,EAAeC,GAAqB,CACtCH,EAAc,MAAQG,EACtBF,EAAuB,MAAQ,EAAA,EAG7BG,EAAmB,IAAM,CAC3BJ,EAAc,MAAQ,KACtBC,EAAuB,MAAQ,EAAA,EAG7B,CAAE,KAAMI,CAAO,EAAIC,GAAS,EAE5BC,EAAiB,MAAOJ,GAAqB,CAC/CF,EAAuB,MAAQ,GAC3B,OAAQE,GACR,MAAMV,EAAOU,CAAkB,EACxBE,EAAA,CACH,QAAS,kBACT,MAAO,SAAA,CACV,IAED,MAAMX,EAAIS,CAAkB,EACrBE,EAAA,CACH,QAAS,kBACT,MAAO,SAAA,CACV,EACL,EAGE,CAAE,QAAAG,GAAYC,KAEdC,EAAmB,MAAOP,GAAqB,CAChC,MAAMK,EAAQ,CAC3B,MAAO,iBACP,QAAS,4CAA4CL,EAAQ,YAAY,KACzE,OAAQ,SACR,KAAM,QACN,SAAU,OAAA,CACb,IAMD,MAAMP,EAAOO,CAAO,EACbE,EAAA,CACH,QAAS,kBACT,MAAO,SAAA,CACV,EAAA,EAGCM,EAAclC,IAEdmC,EAA2B,MAAOC,GAAwB,CACxDF,EAAY,MAAM,wBACH,MAAMH,EAAQ,CACzB,SAAU,QACV,QAAS,+DACT,KAAM,OAAA,CACT,GAEQK,IAGJA,GACT"}