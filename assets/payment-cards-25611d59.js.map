{"version":3,"file":"payment-cards-25611d59.js","sources":["../../src/pages/payments/types.ts","../../src/stores/payment-cards.ts"],"sourcesContent":["export enum PaymentSystemType {\n    Visa = 'visa',\n    MasterCard = 'mastercard',\n}\n\nexport const paymentSystemTypeOptions = Object.values(PaymentSystemType)\n\nexport interface PaymentCard {\n    id: string\n    name: string\n    isPrimary: boolean // show Primary badge\n    paymentSystem: PaymentSystemType // Enum or union type for various payment systems\n    cardNumberMasked: string // ****1679\n    expirationDate: string // 09/24\n}\n\nexport interface BillingAddress {\n    id: string\n    name: string\n    isPrimary: boolean // show Primary badge\n    street: string\n    city: string\n    state: string\n    postalCode: string\n    country: string\n}\n","// src/stores/cards.ts\n\nimport { defineStore } from 'pinia'\nimport { sleep } from '../services/utils'\nimport { PaymentSystemType, PaymentCard } from '../pages/payments/types' // adjust the import path accordingly\n\n// Simulated fetch function\nconst fetchPaymentCards = async () => {\n    await sleep(1000)\n    return [\n        {\n            id: '1',\n            name: 'Main card',\n            isPrimary: true,\n            paymentSystem: PaymentSystemType.Visa,\n            cardNumberMasked: '****1679',\n            expirationDate: '0924',\n        },\n        {\n            id: '2',\n            name: 'Online shopping',\n            isPrimary: false,\n            paymentSystem: PaymentSystemType.MasterCard,\n            cardNumberMasked: '****8921',\n            expirationDate: '1123',\n        },\n        {\n            id: '3',\n            name: 'Backup Visa',\n            isPrimary: false,\n            paymentSystem: PaymentSystemType.MasterCard,\n            cardNumberMasked: '****4523',\n            expirationDate: '1222',\n        },\n    ]\n}\n\nexport const usePaymentCardsStore = defineStore({\n    id: 'paymentCards',\n    state: () => ({\n        paymentCards: [] as PaymentCard[],\n        loading: false,\n    }),\n    getters: {\n        currentPaymentCard: (state): PaymentCard | undefined => state.paymentCards.find((card) => card.isPrimary),\n        allPaymentCards: (state) => state.paymentCards,\n    },\n    actions: {\n        async load() {\n            this.loading = true\n            this.paymentCards = await fetchPaymentCards()\n            this.loading = false\n        },\n        create(card: PaymentCard) {\n            this.paymentCards.unshift(card)\n        },\n        update(card: PaymentCard) {\n            const index = this.paymentCards.findIndex((existingCard) => existingCard.id === card.id)\n            if (index !== -1) {\n                this.paymentCards.splice(index, 1, card)\n            }\n        },\n        remove(cardId: string) {\n            this.paymentCards = this.paymentCards.filter((card) => card.id !== cardId)\n        },\n    },\n})\n"],"names":["PaymentSystemType","fetchPaymentCards","sleep","usePaymentCardsStore","defineStore","state","card","index","existingCard","cardId"],"mappings":"gFAAY,IAAAA,GAAAA,IACRA,EAAA,KAAO,OACPA,EAAA,WAAa,aAFLA,IAAAA,GAAA,CAAA,CAAA,EAK4B,OAAO,OAAOA,CAAiB,ECEvE,MAAMC,EAAoB,UACtB,MAAMC,EAAM,GAAI,EACT,CACH,CACI,GAAI,IACJ,KAAM,YACN,UAAW,GACX,cAAeF,EAAkB,KACjC,iBAAkB,WAClB,eAAgB,MACpB,EACA,CACI,GAAI,IACJ,KAAM,kBACN,UAAW,GACX,cAAeA,EAAkB,WACjC,iBAAkB,WAClB,eAAgB,MACpB,EACA,CACI,GAAI,IACJ,KAAM,cACN,UAAW,GACX,cAAeA,EAAkB,WACjC,iBAAkB,WAClB,eAAgB,MACpB,CAAA,GAIKG,EAAuBC,EAAY,CAC5C,GAAI,eACJ,MAAO,KAAO,CACV,aAAc,CAAC,EACf,QAAS,EAAA,GAEb,QAAS,CACL,mBAAqBC,GAAmCA,EAAM,aAAa,KAAMC,GAASA,EAAK,SAAS,EACxG,gBAAkBD,GAAUA,EAAM,YACtC,EACA,QAAS,CACL,MAAM,MAAO,CACT,KAAK,QAAU,GACV,KAAA,aAAe,MAAMJ,IAC1B,KAAK,QAAU,EACnB,EACA,OAAOK,EAAmB,CACjB,KAAA,aAAa,QAAQA,CAAI,CAClC,EACA,OAAOA,EAAmB,CAChB,MAAAC,EAAQ,KAAK,aAAa,UAAWC,GAAiBA,EAAa,KAAOF,EAAK,EAAE,EACnFC,IAAU,IACV,KAAK,aAAa,OAAOA,EAAO,EAAGD,CAAI,CAE/C,EACA,OAAOG,EAAgB,CACd,KAAA,aAAe,KAAK,aAAa,OAAQH,GAASA,EAAK,KAAOG,CAAM,CAC7E,CACJ,CACJ,CAAC"}